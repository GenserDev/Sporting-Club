// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}




enum Rol {
  COMPRADOR
  VENDEDOR
}

enum EstadoVehiculo {
  NUEVO
  USADO
}

enum MedioPago {
  EFECTIVO
  TARJETA
  TRANSFERENCIA
}

model Sede {
  id        Int        @id @default(autoincrement())
  nombre    String
  direccion String

  empleados Empleado[]
}

model Usuario {
  id         Int      @id @default(autoincrement())
  correo     String   @unique
  password   String
  rol        Rol

  empleado   Empleado? @relation("EmpleadoUsuario", fields: [empleadoId], references: [id])
  empleadoId Int?      @unique

  cliente    Cliente?  @relation("ClienteUsuario", fields: [clienteId], references: [id])
  clienteId  Int?      @unique
}

model Empleado {
  id        Int       @id @default(autoincrement())
  nombre    String
  puesto    String
  sedeId    Int

  sede      Sede      @relation(fields: [sedeId], references: [id])
  usuario   Usuario?  @relation("EmpleadoUsuario")
  facturas  Factura[]
}

model Cliente {
  id        Int       @id @default(autoincrement())
  nombre    String
  telefono  String
  correo    String   @unique

  usuario   Usuario?  @relation("ClienteUsuario")
  facturas  Factura[]
}

model Marca {
  id          Int        @id @default(autoincrement())
  nombre      String     @unique
  pais_origen String?

  vehiculos   Vehiculo[]
}

model Vehiculo {
  id              Int             @id @default(autoincrement())
  modelo          String
  anio            Int
  color           String
  estado          EstadoVehiculo
  linea           String          // Línea del vehículo (SUV, Sedán, etc.)
  kilometraje     Int             // Kilometraje del vehículo
  precio          Decimal         @db.Decimal(10,2)
  precio_original Decimal         @db.Decimal(10,2) // Precio original del vehículo
  disponible      Boolean         @default(true)
  marcaId         Int
  airbags         Int             // Número de airbags
  puntuacionSeguridad Int         // Puntuación de seguridad
  motor           String          // Descripción del motor
  tipoCombustible TipoCombustible // Tipo de combustible (Gasolina, Diesel, Eléctrico, Híbrido)
  torque          Int             // Torque del motor en Nm
  caballos        Int             // Caballos de fuerza

  marca           Marca           @relation(fields: [marcaId], references: [id])
  detalles        DetalleFactura[]
}

enum TipoCombustible {
  GASOLINA
  DIESEL
  ELECTRICO
  HIBRIDO
}

model Factura {
  id          Int            @id @default(autoincrement())
  fecha       DateTime       @default(now())
  medioPago   MedioPago
  clienteId   Int
  empleadoId  Int
  total       Decimal        @db.Decimal(10,2)

  cliente     Cliente        @relation(fields: [clienteId], references: [id])
  empleado    Empleado       @relation(fields: [empleadoId], references: [id])
  detalles    DetalleFactura[]
}

model DetalleFactura {
  id         Int       @id @default(autoincrement())
  facturaId  Int
  vehiculoId Int
  precio     Decimal   @db.Decimal(10,2)
  descuento  Decimal   @default(0.0) @db.Decimal(10,2)

  factura    Factura   @relation(fields: [facturaId], references: [id])
  vehiculo   Vehiculo  @relation(fields: [vehiculoId], references: [id])
}

model Categoria {
  id          Int        @id @default(autoincrement())
  nombre      String     @unique
  descripcion String?
  vehiculos   Vehiculo[]
}

model Pago {
  id         Int       @id @default(autoincrement())
  monto      Decimal   @db.Decimal(10,2)
  fecha      DateTime  @default(now())
  medioPago  MedioPago
  clienteId  Int
  empleadoId Int

  cliente    Cliente   @relation(fields: [clienteId], references: [id])
  empleado   Empleado  @relation(fields: [empleadoId], references: [id])
}

model FacturaVehiculo {
  facturaId  Int
  vehiculoId Int
  precio     Decimal   @db.Decimal(10,2)
  descuento  Decimal   @default(0.0) @db.Decimal(10,2)

  factura    Factura   @relation(fields: [facturaId], references: [id])
  vehiculo   Vehiculo  @relation(fields: [vehiculoId], references: [id])

  @@id([facturaId, vehiculoId])
}

model HistorialVehiculo {
  id         Int       @id @default(autoincrement())
  vehiculoId Int
  fecha      DateTime  @default(now())
  descripcion String

  vehiculo   Vehiculo  @relation(fields: [vehiculoId], references: [id])
}

model Proveedor {
  id          Int        @id @default(autoincrement())
  nombre      String
  telefono    String
  correo      String?    @unique
  direccion   String?
  vehiculos   Vehiculo[]
}

model Promocion {
  id          Int        @id @default(autoincrement())
  nombre      String
  descripcion String
  descuento   Decimal    @db.Decimal(5,2)
  vehiculoId  Int

  vehiculo    Vehiculo   @relation(fields: [vehiculoId], references: [id])
}

model Reporte {
  id          Int        @id @default(autoincrement())
  fecha       DateTime   @default(now())
  tipo        String
  descripcion String
}

model Role {
  id          Int        @id @default(autoincrement())
  nombre      String     @unique
  descripcion String
  usuarios    Usuario[]
}

model EmpleadoSucursal {
  empleadoId Int
  sedeId     Int
  horario    String

  empleado   Empleado  @relation(fields: [empleadoId], references: [id])
  sede       Sede      @relation(fields: [sedeId], references: [id])

  @@id([empleadoId, sedeId])
}